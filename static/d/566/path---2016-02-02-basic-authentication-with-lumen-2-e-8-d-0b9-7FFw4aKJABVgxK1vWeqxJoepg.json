{"data":{"site":{"siteMetadata":{"title":"Edgar Pino's Blog","author":"Edgar Pino"}},"markdownRemark":{"id":"01ca96a2-375c-5056-b100-c3f8d8cbbcfa","excerpt":"The Problem The other day I was trying to create a simple admin page without having to rely on a database and all of the other stuff. I knew…","html":"<h4>The Problem</h4>\n<p>The other day I was trying to create a simple admin page without having to rely on a database and all of the other stuff. I knew how to do it with with an <code class=\"language-text\">.htaccess</code> file but since I was using Lumen it wasn’t quite going to work. I have to admit that I’m new to the Laravel/Lumen but so far I’ve come to really like it and I enjoy working with it. The solution I come up with is using Middleware.</p>\n<h4>The Solution</h4>\n<p>The first thing we need to do is to uncomment the following lines inside the <code class=\"language-text\">bootstrap/app.php</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//Uncomment\n  $app-&gt;withEloquent();\n  $app-&gt;withFacades();</code></pre></div>\n<p>Lets add the middleware to the same file.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$app-&gt;routeMiddleware([\n  &#39;BasicAuth&#39; =&gt; &#39;App\\Http\\Middleware\\BasicAuthMiddleware&#39;,\n]);</code></pre></div>\n<p>Keep in mind that <code class=\"language-text\">&#39;BasicAuth&#39; =&gt; &#39;App\\Http\\Middleware\\BasicAuthMiddleware&#39;</code> is our custom Middleware.</p>\n<p>Next we have to create our Middleware inside <code class=\"language-text\">app/Http/Middleware/</code>. Let’s name is <code class=\"language-text\">BasicAuthMiddleware.php</code> and this is what to put inside.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?php\n\n  namespace App\\Http\\Middleware;\n\n  use Closure;\n\n  class BasicAuthMiddleware\n  {\n      /**\n        * Handle an incoming request.\n        *\n        * @param  \\Illuminate\\Http\\Request  $request\n        * @param  \\Closure  $next\n        * @return mixed\n        */\n      public function handle($request, Closure $next) {\n          if($request-&gt;getUser() != &#39;admin&#39; || $request-&gt;getPassword() != &#39;PasswordHere!&#39;) {\n              $headers = array(&#39;WWW-Authenticate&#39; =&gt; &#39;Basic&#39;);\n              return response(&#39;Admin Login&#39;, 401, $headers);\n          }\n          return $next($request);\n      }\n  }</code></pre></div>\n<p>This just simply takes in any request, checks the entered username and password, if they match then the user sees the page, otherwise ask again.</p>\n<p>The last thing we need to do is inject our custom Middleware with our routes inside the <code class=\"language-text\">app/HTTP/routes.php</code> file. Here is a basic example.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$app-&gt;group([&#39;prefix&#39;=&gt;&#39;admin/&#39;, &#39;middleware&#39; =&gt; &#39;BasicAuth&#39;, &#39;namespace&#39; =&gt; &#39;App\\Http\\Controllers&#39;], function($app) {\n    $app-&gt;get(&#39;/&#39;, &#39;AdminController@index&#39;);\n    $app-&gt;get(&#39;/manage&#39;, &#39;AdminController@index&#39;);\n});</code></pre></div>\n<p>That is all we need to get Basic Authentication working.</p>\n<hr>\n<p>Useful Links</p>\n<ul>\n<li>HTTP Middleware <a href=\"https://lumen.laravel.com/docs/5.2/middleware\">https://lumen.laravel.com/docs/5.2/middleware</a></li>\n<li>Routing <a href=\"https://lumen.laravel.com/docs/5.2/routing\">https://lumen.laravel.com/docs/5.2/routing</a></li>\n</ul>","frontmatter":{"title":"Basic Authentication with Lumen","date":"February 02, 2016"}}},"pageContext":{"slug":"/2016/02/02/basic-authentication-with-lumen-2","previous":{"fields":{"slug":"/quick-note-on-computers-and-programming-languages/"},"frontmatter":{"title":"Quick note on computers and programming languages"}},"next":{"fields":{"slug":"/2017/01/24/simple-cors-in-aws-lambda-serverless-architecture"},"frontmatter":{"title":"Simple CORS in AWS Lambda - Serverless Architecture"}}}}