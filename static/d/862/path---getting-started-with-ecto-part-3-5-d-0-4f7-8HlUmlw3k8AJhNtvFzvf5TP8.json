{"data":{"site":{"siteMetadata":{"title":"Edgar Pino's Blog","author":"Edgar Pino"}},"markdownRemark":{"id":"2251976d-4022-579c-9c2f-16dcde4ed065","excerpt":"Welcome to part three of Getting Started with Ecto. On the  last post , we covered how to create migrations, schemas, and changesets. In…","html":"<p>Welcome to part three of Getting Started with Ecto. On the <a href=\"/getting-started-with-ecto-part-2/\">last post</a>, we covered how to create migrations, schemas, and changesets. In this post we will cover how to create records in our database.</p>\n<h2>Ecto is not an ORM</h2>\n<p>If you come from Ruby on Rails or .Net then you might be familiar with Active Record or Entity framework. You might be used to doing something like <code class=\"language-text\">user.Save()</code> or <code class=\"language-text\">User.Find()</code>. These and many frameworks follow the Active Record design pattern which is an approach of accessing data in a database. One of the major drawbacks of this pattern is that your domain is usually tightly coupled to a certains persistence layer.</p>\n<p>Ecto follows the Repository design pattern which is an abstraction of the data layer and a way of centralising the handling of the domain objects. In Ecto, queries are done using the <code class=\"language-text\">Ecto.Query</code> DSL agains our repository (<code class=\"language-text\">GettingStartedWithEcto.Repo</code>).</p>\n<p>Okay, let’s move on to creating records.</p>\n<h2>Creating Records</h2>\n<p>The first thing we are going to create a challenge. Check out the database design in part 2 for reference.</p>\n<p>Let’s define the <code class=\"language-text\">Challenges</code> module inside <code class=\"language-text\">getting_started_with_ecto/challenges/challenges.ex</code>. Inside of that module, we will define a function called <code class=\"language-text\">create_challenge</code> that takes one argument with map as the default. In this function, we will validate the data via the chageset and insert it to the database. Here’s how that looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges<span class=\"token punctuation\">.</span>Challenge\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Repo\n\n  <span class=\"token keyword\">def</span> create_challenge<span class=\"token punctuation\">(</span>attrs <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">%</span>Challenge<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|></span> Challenge<span class=\"token punctuation\">.</span>changeset<span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In this case, the <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert/2\"><code class=\"language-text\">Repo.insert</code></a> function takes a <code class=\"language-text\">changeset</code>. It also takes other options like:</p>\n<ul>\n<li><code class=\"language-text\">:returning</code> for selecting which fields to return. It will return the fields the struct by default.</li>\n<li><code class=\"language-text\">:on_conflict</code> to specify an alternative action to raising an error. We will use this one later on for upserts.</li>\n</ul>\n<p>See the official docs for more <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert/2-options\">options</a>. You can also use the <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert!/2\"><code class=\"language-text\">Repo.insert!</code></a> function which is similar to <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert/2\"><code class=\"language-text\">Repo.insert</code></a> which will raise if the changeset is invalid or an error happens.</p>\n<p>Okay, let’s try inserting a Challenge using the function we just created.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Best Challenge Ever\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">|></span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges<span class=\"token punctuation\">.</span>create_challenge</code></pre></div>\n<p>It should return the following tuple:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">%</span>GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges<span class=\"token punctuation\">.</span>Challenge<span class=\"token punctuation\">{</span>\n   <span class=\"token attr-name\">__meta__:</span> <span class=\"token comment\">#Ecto.Schema.Metadata&lt;:loaded, \"challenges\">,</span>\n   <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">id:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">inserted_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">07</span> <span class=\"token number\">19</span><span class=\"token atom symbol\">:46</span><span class=\"token atom symbol\">:50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">solutions:</span> <span class=\"token comment\">#Ecto.Association.NotLoaded&lt;association :solutions is not loaded>,</span>\n   <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Best Challenge Ever\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">updated_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">07</span> <span class=\"token number\">19</span><span class=\"token atom symbol\">:46</span><span class=\"token atom symbol\">:50</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Make note of that <code class=\"language-text\">Ecto.Association.NotLoaded</code> message. We will go over that later.</p>\n<p>Let’s move on to reading records.</p>\n<h2>Reading Records</h2>\n<p>Reading records is simple. Let’s create a function to get a challenge by primary id inside the <code class=\"language-text\">Challenges</code> module. It will look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> get_challenge_by_id<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  Challenge\n  <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>As you can see, this functions is fairly straightforward. We <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:get/3\"><code class=\"language-text\">Repo.get</code></a> takes in our <code class=\"language-text\">Challenge</code> schema and the id. It returns the struct if there is a match, otherwise <code class=\"language-text\">nil</code> will be returned.</p>\n<p>Let’s give it a try.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges\n\n<span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> challenge<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Best Challenge Ever\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">|></span> Challenges<span class=\"token punctuation\">.</span>create_challenge\n\nChallenges<span class=\"token punctuation\">.</span>get_challenge_by_id<span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It should return the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token punctuation\">%</span>GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges<span class=\"token punctuation\">.</span>Challenge<span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">__meta__:</span> <span class=\"token comment\">#Ecto.Schema.Metadata&lt;:loaded, \"challenges\">,</span>\n  <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">id:</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">inserted_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">11</span> <span class=\"token number\">05</span><span class=\"token atom symbol\">:08</span><span class=\"token atom symbol\">:32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">solutions:</span> <span class=\"token comment\">#Ecto.Association.NotLoaded&lt;association :solutions is not loaded>,</span>\n  <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Best Challenge Ever\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">updated_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">11</span> <span class=\"token number\">05</span><span class=\"token atom symbol\">:08</span><span class=\"token atom symbol\">:32</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Updating Records</h2>\n<p>Updating records is also simple. Let’s start by the <code class=\"language-text\">update_challenge</code> function inside the <code class=\"language-text\">Challenges</code> module.\nIt will take in a <code class=\"language-text\">%Challenge</code> struct as the first argument and the updated fields as a map. Our function will look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> update_challenge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">%</span>Challenge<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> challenge<span class=\"token punctuation\">,</span> attrs <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  challenge\n  <span class=\"token operator\">|></span> Challenge<span class=\"token punctuation\">.</span>changeset<span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>As you may already see, the update function is similar to <code class=\"language-text\">create_challenge</code>. We pass in our record as the first argument and the fields to update as the second argument. The <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:update/2\"><code class=\"language-text\">Repo.update</code></a> function takes the updated changeset and executes the query to update the record. This relies on the primary key of the record <code class=\"language-text\">Ecto.NoPrimaryKeyFieldError</code> will be raised if there is none.</p>\n<p>Let’s try updating the challenge we just created.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges\n\n<span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> challenge<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Best Challenge Ever\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">|></span> Challenges<span class=\"token punctuation\">.</span>create_challenge\n\nchallenge\n<span class=\"token operator\">|></span> Challenges<span class=\"token punctuation\">.</span>update_challenge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Updated title\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It should return a tuple <code class=\"language-text\">{:ok, struct}</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">%</span>GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges<span class=\"token punctuation\">.</span>Challenge<span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">__meta__:</span> <span class=\"token comment\">#Ecto.Schema.Metadata&lt;:loaded, \"challenges\">,</span>\n  <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">id:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">inserted_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">08</span> <span class=\"token number\">14</span><span class=\"token atom symbol\">:13</span><span class=\"token atom symbol\">:19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">solutions:</span> <span class=\"token comment\">#Ecto.Association.NotLoaded&lt;association :solutions is not loaded>,</span>\n  <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Updated title\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">updated_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">08</span> <span class=\"token number\">14</span><span class=\"token atom symbol\">:13</span><span class=\"token atom symbol\">:51</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Deleting Records</h2>\n<h2>Adding Relationships</h2>\n<p>Now let’s add a user with a credentials relationship.</p>\n<p>Let’s define the <code class=\"language-text\">Accounts</code> module inside <code class=\"language-text\">getting_started_with_ecto/accounts/accounts.ex</code>. Inside of that module, we will define a function called <code class=\"language-text\">create_users_with_credentials</code> that takes one argument with map as the default. In this function, we will validate the user and credentials and insert them both into the database. Here’s how that looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>User<span class=\"token punctuation\">,</span> Credential<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Repo\n\n  <span class=\"token keyword\">def</span> create_user_with_credentials<span class=\"token punctuation\">(</span>attrs <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">%</span>User<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|></span> User<span class=\"token punctuation\">.</span>changeset<span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Ecto<span class=\"token punctuation\">.</span>Changeset<span class=\"token punctuation\">.</span>cast_assoc<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:credential</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">with:</span> <span class=\"token capture function\">&amp;Credential.changeset/2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<blockquote>\n<p>Notice the default map argument</p>\n</blockquote>\n<p>We first pass an empty <code class=\"language-text\">%User{}</code> struct and the <code class=\"language-text\">attrs</code> to the <code class=\"language-text\">User.changeset</code> function to validate our data.\nAfter that, we pipe the result to the <a href=\"https://hexdocs.pm/ecto/Ecto.Changeset.html#cast_embed/3\"><code class=\"language-text\">cast_assoc</code></a>. This function maps the <code class=\"language-text\">credential</code> association, runs the <code class=\"language-text\">Credential.changeset</code> function, and returns a changeset with our user and credentials. Lastly, we call <code class=\"language-text\">Repo.insert</code> which will insert the records into the database.</p>","frontmatter":{"title":"Getting Started with Ecto Part 3: CRUD","date":"December 03, 2018"}}},"pageContext":{"slug":"/getting-started-with-ecto-part-3/","previous":{"fields":{"slug":"/getting-started-with-ecto-part-2/"},"frontmatter":{"title":"Getting Started with Ecto Part 2: Migrations, Schemas, and Changeset"}},"next":null}}