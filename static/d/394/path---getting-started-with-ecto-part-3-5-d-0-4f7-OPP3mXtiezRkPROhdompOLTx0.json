{"data":{"site":{"siteMetadata":{"title":"Edgar Pino's Blog","author":"Edgar Pino"}},"markdownRemark":{"id":"2251976d-4022-579c-9c2f-16dcde4ed065","excerpt":"Welcome to part three of Getting Started with Ecto. In the  last post , we covered how to create migrations, schemas, and changesets. In…","html":"<p>Welcome to part three of Getting Started with Ecto. In the <a href=\"/getting-started-with-ecto-part-2/\">last post</a>, we covered how to create migrations, schemas, and changesets. In this post we will cover how to create records in our database.</p>\n<h2>Ecto is not an ORM</h2>\n<p>If you come from Ruby on Rails or .Net then you might be familiar with Active Record or Entity framework. You might be used to doing something like <code class=\"language-text\">user.Save()</code> or <code class=\"language-text\">User.Find()</code>. These and many frameworks follow the Active Record design pattern which is an approach of accessing data in a database. One of the major drawbacks of this pattern is that your domain is usually tightly coupled to a certains persistence layer.</p>\n<p>Ecto follows the Repository design pattern which is an abstraction of the data layer and a way of centralising the handling of the domain objects. In Ecto, queries are done using the <code class=\"language-text\">Ecto.Query</code> DSL agains our repository (<code class=\"language-text\">GettingStartedWithEcto.Repo</code>).</p>\n<p>Okay, let’s move on to creating records.</p>\n<h2>Creating Records</h2>\n<p>The first thing we are going to create a user with credentials. Check out the database design in part 2 for reference.</p>\n<p>Let’s define the <code class=\"language-text\">Accounts</code> module inside <code class=\"language-text\">getting_started_with_ecto/accounts/accounts.ex</code>. Inside of that module, we will define a function called <code class=\"language-text\">create_users_with_credentials</code> that takes one argument with map as the default. In this function, we will validate the user and credentials and insert them both into the database. </p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>User<span class=\"token punctuation\">,</span> Credential<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Repo\n\n  <span class=\"token keyword\">def</span> create_user_with_credentials<span class=\"token punctuation\">(</span>attrs <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">%</span>User<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|></span> User<span class=\"token punctuation\">.</span>changeset<span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Ecto<span class=\"token punctuation\">.</span>Changeset<span class=\"token punctuation\">.</span>cast_assoc<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:credential</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">with:</span> <span class=\"token capture function\">&amp;Credential.changeset/2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<blockquote>\n<p>Notice the default map argument</p>\n</blockquote>\n<p>The next thing we will do </p>\n<h3>Adding Relationships</h3>\n<h2>Updating Records</h2>\n<h2>Deleting Records</h2>","frontmatter":{"title":"Getting Started with Ecto Part 3: Creating Records","date":"December 03, 2018"}}},"pageContext":{"slug":"/getting-started-with-ecto-part-3/","previous":{"fields":{"slug":"/getting-started-with-ecto-part-2/"},"frontmatter":{"title":"Getting Started with Ecto Part 2: Migrations, Schemas, and Changeset"}},"next":null}}