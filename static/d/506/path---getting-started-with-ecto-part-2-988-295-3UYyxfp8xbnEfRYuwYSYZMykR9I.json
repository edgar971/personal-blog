{"data":{"site":{"siteMetadata":{"title":"Edgar Pino's Blog","author":"Edgar Pino"}},"markdownRemark":{"id":"3413e355-82df-54d7-a765-c2f929759acc","excerpt":"Welcome to part two of Getting Started with Ecto. In the last post, we covered how to install and configure Ecto in our application. In this…","html":"<p>Welcome to part two of Getting Started with Ecto. In the last post, we covered how to install and configure Ecto in our application. In this post, we will cover migrations, schemas, and changesets in Ecto.</p>\n<h2>Migrations</h2>\n<p>Now that we have a database and Repo, we are going to create tables and columns. To do that, we will create migrations that define the structure of our tables and define any relationships. Before we create our first migration, let’s look at the database design of our demo application.</p>\n<p><img src=\"/database-f6d1b6a1a6b5358b10c429995b038d48.svg\" alt=\"Database design\"></p>\n<ul>\n<li>Users have credentials with a unique email</li>\n<li>Challenges have many solutions.</li>\n<li>Users can have one solution per challenge.</li>\n</ul>\n<h4>Generating Migrations</h4>\n<p>Let’s go ahead and create our first migration by running the following generator command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mix ecto.gen.migration create_users_table</code></pre></div>\n<p>That will create a file inside of <code class=\"language-text\">priv/repo/migrations/</code> that looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Repo<span class=\"token punctuation\">.</span>Migrations<span class=\"token punctuation\">.</span>CreateUsersTable <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> Ecto<span class=\"token punctuation\">.</span>Migration\n\n  <span class=\"token keyword\">def</span> change <span class=\"token keyword\">do</span>\n\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Let’s define our table inside the <a href=\"https://hexdocs.pm/ecto/Ecto.Migration.html#module-change\"><code class=\"language-text\">change</code></a> function, this allows us to create reversible migrations.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> change <span class=\"token keyword\">do</span>\n  create table<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:users</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:name</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:string</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">size:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:age</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:integer</span><span class=\"token punctuation\">)</span>\n\n    timestamps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The column name and type are defined as atoms. We defined the name as a string with a character limit of 100 and age is an integer. We also use the <code class=\"language-text\">timestamps</code> function that adds <code class=\"language-text\">:inserted_at</code> and <code class=\"language-text\">:updated_at</code> timestamps columns. See the docs for other <a href=\"https://hexdocs.pm/ecto/Ecto.Schema.html#module-primitive-types\">primitive types</a>.</p>\n<h4>Running Migrations</h4>\n<p>Now that we have our migrations, let’s run them with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mix ecto.migrate</code></pre></div>\n<p>You should see the following output if it succeded:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">16:07:36.057 <span class=\"token punctuation\">[</span>info<span class=\"token punctuation\">]</span>  <span class=\"token operator\">==</span> Running GettingStartedWithEcto.Repo.Migrations.CreateUsersTable.change/0 forward\n16:07:36.057 <span class=\"token punctuation\">[</span>info<span class=\"token punctuation\">]</span>  create table <span class=\"token function\">users</span>\n16:07:36.068 <span class=\"token punctuation\">[</span>info<span class=\"token punctuation\">]</span>  <span class=\"token operator\">==</span> Migrated <span class=\"token keyword\">in</span> 0.0s</code></pre></div>\n<p>If we look at our database, we see two tables: <code class=\"language-text\">schema_migrations</code> and <code class=\"language-text\">users</code>. The <code class=\"language-text\">schema_migrations</code> keeps track of our migrations and the order they were executed. This allows Ecto to rollback migrations.</p>\n<p>Let’s move on to the <code class=\"language-text\">credentials</code> migration. I won’t go over how to generate and run migrations since that’s been covered. This is how our credentials migration should look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Repo<span class=\"token punctuation\">.</span>Migrations<span class=\"token punctuation\">.</span>CreateCredentialsTable <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> Ecto<span class=\"token punctuation\">.</span>Migration\n\n  <span class=\"token keyword\">def</span> change <span class=\"token keyword\">do</span>\n    create table<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:credentials</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      add<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:email</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:string</span><span class=\"token punctuation\">)</span>\n      add<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:password_hash</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:string</span><span class=\"token punctuation\">)</span>\n      add<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:user_id</span><span class=\"token punctuation\">,</span> references<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:users</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">on_delete:</span> <span class=\"token atom symbol\">:delete_all</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">null:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n      timestamps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    create<span class=\"token punctuation\">(</span>unique_index<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:credentials</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:email</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    create<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:credentials</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:user_id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Notice that our <code class=\"language-text\">user_id</code> references the <code class=\"language-text\">users</code> table. We set the <code class=\"language-text\">:on_delete</code> to <code class=\"language-text\">:delete_all</code> which deletes the <code class=\"language-text\">credentials</code> record when the user record is deleted. Check out the <a href=\"https://hexdocs.pm/ecto/Ecto.Migration.html#references/2-options\">Ecto docs</a> for other supported options. Lastly, we set <code class=\"language-text\">null</code> to <code class=\"language-text\">false</code> which prevents the <code class=\"language-text\">user_id</code> from being <code class=\"language-text\">null</code>.</p>\n<p>We also created an index on the <code class=\"language-text\">email</code> and a unique index on the <code class=\"language-text\">user_id</code> columns.\nSee the <a href=\"https://hexdocs.pm/ecto/Ecto.Migration.html#unique_index/3\"><code class=\"language-text\">unique_index</code></a> and <a href=\"https://hexdocs.pm/ecto/Ecto.Migration.html#index/3\"><code class=\"language-text\">index</code></a> functions for more info.</p>\n<p>Our <code class=\"language-text\">solutions</code> and <code class=\"language-text\">challenges</code> migrations don’t cover anything new so I will skip them but check out the <a href=\"https://github.com/edgar971/getting_started_with_ecto/tree/master/priv/repo/migrations\">source code</a> reference.</p>\n<p>Let’s move on to creating schemas.</p>\n<h2>Schemas</h2>\n<p>Schemas are modules that represent data from our database. They define table and column mapping, help functions, and changesets.</p>\n<h4>Creating Schemas</h4>\n<p>Let’s create our first schema by creating a directory inside the <code class=\"language-text\">lib</code> directory. We currently don’t have a generator command so we have to create the directories and files manually. In our demo app, it’s inside <code class=\"language-text\">lib/getting_started_with_ecto/accounts/user.ex</code> and it looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> Ecto<span class=\"token punctuation\">.</span>Schema\n\n  schema <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">do</span>\n    field<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:name</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:string</span><span class=\"token punctuation\">)</span>\n    field<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:age</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:integer</span><span class=\"token punctuation\">)</span>\n\n    timestamps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>We use the <a href=\"https://hexdocs.pm/ecto/Ecto.Schema.html#content\"><code class=\"language-text\">schema</code></a> macro to map the users table and columns to a struct.\nWe define the name column to a string and the age as an integer. Lastly, we call the <a href=\"Generates%20:inserted_at%20and%20:updated_at%20timestamp%20fields\"><code class=\"language-text\">timestamps</code></a> function to generate the <code class=\"language-text\">:inserted_at</code> and <code class=\"language-text\">:updated_at</code> timestamp fields.</p>\n<h4>Schema Relationships</h4>\n<p>Let’s create the <code class=\"language-text\">credentials</code> schema. In our demo app, it’s inside <code class=\"language-text\">lib/getting_started_with_ecto/accounts/user.ex</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>Credential <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> Ecto<span class=\"token punctuation\">.</span>Schema\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User\n\n  schema <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">do</span>\n    field<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:email</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:string</span><span class=\"token punctuation\">)</span>\n    field<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:password_hash</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:integer</span><span class=\"token punctuation\">)</span>\n    belongs_to<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:user</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">)</span>\n\n    timestamps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The new thing here is how we define our one-to-one relationship with the <code class=\"language-text\">users</code> table. We use the <a href=\"https://hexdocs.pm/ecto/Ecto.Schema.html#belongs_to/3\"><code class=\"language-text\">belongs_to</code></a> which does most of the work for us. Notice the first parameter is the name of the relationship and the second parameter is the <code class=\"language-text\">User</code> schema.</p>\n<p>We also want to get the credentials when querying the user, let’s add that to our <code class=\"language-text\">User</code> schema. We will do that by adding <code class=\"language-text\">has_one(:credential, Credential)</code> to the <code class=\"language-text\">User</code> schema file.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> Ecto<span class=\"token punctuation\">.</span>Schema\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>Credential\n\n  schema <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">do</span>\n    field<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:name</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:string</span><span class=\"token punctuation\">)</span>\n    field<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:age</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:integer</span><span class=\"token punctuation\">)</span>\n    has_one<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:credential</span><span class=\"token punctuation\">,</span> Credential<span class=\"token punctuation\">)</span>\n\n    timestamps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<blockquote>\n<p>Note: Don’t forget to add the <code class=\"language-text\">GettingStartedWithEcto.Accounts.Credential</code> alias at the top of the file.</p>\n</blockquote>\n<p>Our <code class=\"language-text\">solution</code> and <code class=\"language-text\">challenge</code> schemas don’t cover anything new so I will skip them but check out the <a href=\"https://github.com/edgar971/getting_started_with_ecto/tree/master/lib/getting_started_with_ecto/challenges\">source code</a> reference.</p>\n<p>Let’s move on to changesets.</p>\n<h2>Schema Changesets</h2>\n<p>The changeset is a function in the schema file that allow us to filter and cast our schema fields, as well as tracking and validating data before it gets to the database.</p>\n<h4>Defining Changesets</h4>\n<p>Let’s define the <code class=\"language-text\">changeset</code> function for our <code class=\"language-text\">user</code> schema file:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre style=\"counter-reset: linenumber 0\" class=\"language-elixir line-numbers\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>User <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> Ecto<span class=\"token punctuation\">.</span>Schema\n  <span class=\"token keyword\">import</span> Ecto<span class=\"token punctuation\">.</span>Changeset <span class=\"token comment\"># Add the import</span>\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Accounts<span class=\"token punctuation\">.</span>Credential\n\n  schema <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">do</span>\n    field<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:name</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:string</span><span class=\"token punctuation\">)</span>\n    field<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:age</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:integer</span><span class=\"token punctuation\">)</span>\n    has_one<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:credential</span><span class=\"token punctuation\">,</span> Credential<span class=\"token punctuation\">)</span>\n\n    timestamps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># Add following function</span>\n  <span class=\"token keyword\">def</span> changeset<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    user\n    <span class=\"token operator\">|></span> cast<span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:name</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:age</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> validate_required<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:name</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> validate_inclusion<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:age</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token operator\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We first imported the <code class=\"language-text\">Ecto.Changeset</code> and then we defined our <code class=\"language-text\">changeset</code> function with two arguments. The <code class=\"language-text\">user</code> argument can be\na changeset, schema struc, or a tuple with <code class=\"language-text\">{data, types}</code>. The <code class=\"language-text\">attrs</code> argument is a map like <code class=\"language-text\">%{&quot;name&quot; =&gt; &quot;Alan&quot;}</code> or <code class=\"language-text\">%{name: &quot;Alan&quot;}</code>. </p>\n<p>Let’s look at the internals of this function. </p>\n<p>In line 17, we piped the <code class=\"language-text\">user</code> to the <code class=\"language-text\">cast</code> function which applies the <code class=\"language-text\">attrs</code> changes to the <code class=\"language-text\">user</code> given a set of allowed keys. In this example, the keys are <code class=\"language-text\">[:name, :age]</code> since those are our schema fields. This means that any other values in the <code class=\"language-text\">attrs</code> map will be ignored and filtered out. Lastly, the <code class=\"language-text\">cast</code> function returns a changeset if everything was successful.</p>","frontmatter":{"title":"Getting Started with Ecto: Part 2","date":"October 03, 2018"}}},"pageContext":{"slug":"/getting-started-with-ecto-part-2/","previous":{"fields":{"slug":"/getting-started-with-ecto-part-1/"},"frontmatter":{"title":"Getting Started with Ecto: Part 1"}},"next":null}}