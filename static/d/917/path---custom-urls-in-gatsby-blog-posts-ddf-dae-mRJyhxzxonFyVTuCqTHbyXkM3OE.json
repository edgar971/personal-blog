{"data":{"site":{"siteMetadata":{"title":"Edgar Pino's Blog","author":"Edgar Pino"}},"markdownRemark":{"id":"0caa960e-24fb-5595-aa8e-fa8548dff32f","excerpt":"Problem When moving my blog from Ghost to Gatsby I ran into an issue. I wanted to have custom links instead of the default directory name…","html":"<h2>Problem</h2>\n<p>When moving my blog from Ghost to Gatsby I ran into an issue. I wanted to have custom links instead of the default directory name inside of pages. Something like <code class=\"language-text\">/2018-01-12/path-to-a-page</code> instead of <code class=\"language-text\">/path-to-a-page</code>. I did search but I didn’t find a solution that would support both type of links.</p>\n<h2>Solution</h2>\n<p>My solution was simple and not hard to implement. We are going to support adding <code class=\"language-text\">path</code> option to the frontmatter, that is the content between the three hyphens.</p>\n<p>Something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\ntitle: &#39;Custom URLs in Gatsby Blog Posts&#39;\ndate: &#39;2018-09-21&#39;\npath: &#39;/custom/path/to/blog-post&#39;\n---</code></pre></div>\n<p>We also want to support the default way of generating paths which is directory based.</p>\n<p>The first thing we are going to do is update our <code class=\"language-text\">gatsby-node.js</code> to support the <code class=\"language-text\">path</code> field in our frontmatter.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> path\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  path <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>path\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  path <span class=\"token operator\">=</span> <span class=\"token function\">createFilePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> getNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We first check if the node has the <code class=\"language-text\">path</code> field and set the path if it is.\nWe use the default way of creating the path via the <code class=\"language-text\">createFilePath</code> function as fallback.</p>\n<p>Here’s the full <code class=\"language-text\">gatsby-node.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Promise <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bluebird'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createFilePath <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gatsby-source-filesystem'</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> blogPost <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/templates/blog-post.js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token string\">`\n          {\n            allMarkdownRemark(\n              sort: { fields: [frontmatter___date], order: DESC }\n              limit: 1000\n            ) {\n              edges {\n                node {\n                  fields {\n                    slug\n                  }\n                  frontmatter {\n                    title\n                  }\n                }\n              }\n            }\n          }\n        `</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Create blog posts pages.</span>\n        <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges\n\n        _<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> previous <span class=\"token operator\">=</span>\n            index <span class=\"token operator\">===</span> posts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> posts<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>node\n          <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> index <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> posts<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>node\n\n          <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            path<span class=\"token punctuation\">:</span> post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n            component<span class=\"token punctuation\">:</span> blogPost<span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n              slug<span class=\"token punctuation\">:</span> post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n              previous<span class=\"token punctuation\">,</span>\n              next<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreateNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">,</span> getNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createNodeField <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token string\">`MarkdownRemark`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> path\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      path <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>path\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      path <span class=\"token operator\">=</span> <span class=\"token function\">createFilePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> getNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">createNodeField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`slug`</span></span><span class=\"token punctuation\">,</span>\n      node<span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Custom URLs in Gatsby Blog Posts","date":"September 21, 2018"}}},"pageContext":{"slug":"/custom-urls-in-gatsby-blog-posts/","previous":{"fields":{"slug":"moving-my-blog-to-gatsby-js"},"frontmatter":{"title":"Moving my blog to Gatsby.js"}},"next":null}}