{"data":{"site":{"siteMetadata":{"title":"Edgar Pino's Blog","author":"Edgar Pino"}},"markdownRemark":{"id":"be114413-2044-5b33-9b82-67686e97cd56","excerpt":"Welcome to part one of Getting Started with Ecto. This post is part of a series to teach you how to use Ecto. I will go over how to setup…","html":"<p>Welcome to part one of Getting Started with Ecto. This post is part of a series to teach you how to use Ecto. I will go over how to setup Ecto, create migrations and schemas, along with simple and more complicated queries. By the end of the series, you will be able to comfortably use Ecto with Postgres in your Elixir applications.</p>\n<h2>What is Ecto?</h2>\n<p>Ecto is a database package for Elixir applications. It is used for writing database queries and interacting with your database. With Ecto you can create migrations, define schemas, create and update records, and query your database. The current version supports PostgreSQL and MySQL but support for MSSQL, SQLite, and MongoDB will be added in the future.</p>\n<h2>Installation and Setup</h2>\n<p>Let’s start by adding and configuring Ecto to our Elixir application. Feel free to skip this step if you have this done already or if you are using Phoenix.</p>\n<ol>\n<li>Lets add the <code class=\"language-text\">ecto</code> and <code class=\"language-text\">postgrex</code> packages to our <code class=\"language-text\">deps</code> function in the <code class=\"language-text\">mix.exs</code> file:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defp</span> deps <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ecto</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"~> 2.2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:postgrex</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"~> 0.13.5\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>NOTE: Postgrex is used to execute Ecto queries against our Postgres database.</p>\n<ol start=\"2\">\n<li>Run <code class=\"language-text\">mix deps.get</code> to install our added dependencies.</li>\n</ol>\n<p>Now that we have those packages installed, let’s configure Ecto. We can do that by running the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mix ecto.gen.repo -r GettingStartedWithEcto.Repo</code></pre></div>\n<p>This will generate our Repo, used to connect and query our database, in <code class=\"language-text\">lib/getting_started_with_ecto/repo.ex</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">defmodule GettingStartedWithEcto.Repo do\n  use Ecto.Repo, otp_app: :getting_started_with_ecto\nend</code></pre></div>\n<p>And update our config to connect to the database:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">config :getting_started_with_ecto, GettingStartedWithEcto.Repo,\n  adapter: Ecto.Adapters.Postgres,\n  database: &quot;getting_started_with_ecto_repo&quot;,\n  username: &quot;user&quot;,\n  password: &quot;pass&quot;,\n  hostname: &quot;localhost&quot;</code></pre></div>\n<p>The one thing the generator didn’t do is tell our Elixir application about our <code class=\"language-text\">GettingStartedWithEcto.Repo</code>.\nAdd the following line at the end of<code class=\"language-text\">config.exs</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">config :getting_started_with_ecto, ecto_repos: [GettingStartedWithEcto.Repo]</code></pre></div>\n<p>NOTE: Your Postgres configuration might be different.</p>\n<ol>\n<li>Double check your username, password, and host if you are having problems connecting.</li>\n<li>The default port (<code class=\"language-text\">5432</code>) is used but you can change it by adding to the config above: <code class=\"language-text\">port: 15432</code></li>\n</ol>\n<p>The last thing we need to do is set up the <code class=\"language-text\">GettingStartedWithEcto.Repo</code> as a supervisor within our application’s\nsupervision tree inside <code class=\"language-text\">lib/getting_started_with_ecto/application.ex</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> start<span class=\"token punctuation\">(</span>_type<span class=\"token punctuation\">,</span> _args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      GettingStartedWithEcto<span class=\"token punctuation\">.</span>Repo\n    <span class=\"token punctuation\">]</span>\n    opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token attr-name\">strategy:</span> <span class=\"token atom symbol\">:one_for_one</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">name:</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Supervisor<span class=\"token punctuation\">]</span>\n    Supervisor<span class=\"token punctuation\">.</span>start_link<span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2>Creating the database</h2>\n<p>This last step should be easy if everything is installed and configured properly.</p>\n<p>The following command creates our database:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mix ecto.create</code></pre></div>\n<p>You should see the following message if everything was successful:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">The database for GettingStartedWithEcto.Repo has been created</code></pre></div>\n<h2>Congratulations</h2>\n<p>You have installed and configured Ecto. On the next tutorial we will learn how to create migrations and schemas in our Elixir application.</p>","frontmatter":{"title":"Getting Started with Ecto: Part 1","date":"September 26, 2018"}}},"pageContext":{"slug":"/getting-started-with-ecto-part-1/","previous":{"fields":{"slug":"/custom-urls-in-gatsby-blog-posts/"},"frontmatter":{"title":"Custom URLs in Gatsby Blog Posts"}},"next":null}}