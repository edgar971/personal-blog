{"data":{"site":{"siteMetadata":{"title":"Edgar Pino's Blog","author":"Edgar Pino"}},"markdownRemark":{"id":"2251976d-4022-579c-9c2f-16dcde4ed065","excerpt":"Welcome to part three of Getting Started with Ecto. On the  last post , we covered how to create migrations, schemas, and changesets. In…","html":"<p>Welcome to part three of Getting Started with Ecto. On the <a href=\"/getting-started-with-ecto-part-2/\">last post</a>, we covered how to create migrations, schemas, and changesets. In this post, we will cover how to run CRUD operations against our Postgres database.</p>\n<h2>Ecto is not an ORM</h2>\n<p>If you come from Ruby on Rails or .Net then you might be familiar with Active Record or Entity framework. You might be used to doing something like <code class=\"language-text\">user.Save()</code> or <code class=\"language-text\">User.Find()</code>. These and many frameworks follow the Active Record design pattern which is an approach of accessing data in a database. One of the major drawbacks of this pattern is that your domain is usually tightly coupled to a certain persistence layer.</p>\n<p>Ecto follows the Repository design pattern which is an abstraction of the data layer and a way of centralizing the handling of the domain objects. In Ecto, queries are done using the <code class=\"language-text\">Ecto.Query</code> DSL against our repository (<code class=\"language-text\">GettingStartedWithEcto.Repo</code>).</p>\n<p>Okay, let’s move on to creating records.</p>\n<h2>Creating Records</h2>\n<p>The first thing we are going to create a challenge. Check out the database design in part 2 for reference.</p>\n<p>Let’s define the <code class=\"language-text\">Challenges</code> module inside <code class=\"language-text\">getting_started_with_ecto/challenges/challenges.ex</code>. Inside of that module, we will define a function called <code class=\"language-text\">create_challenge</code> that takes one argument with a map as the default. In this function, we will validate the data via the changeset and insert it to the database. Here’s how that looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges<span class=\"token punctuation\">.</span>Challenge\n  <span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Repo\n\n  <span class=\"token keyword\">def</span> create_challenge<span class=\"token punctuation\">(</span>attrs <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">%</span>Challenge<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|></span> Challenge<span class=\"token punctuation\">.</span>changeset<span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In this case, the <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert/2\"><code class=\"language-text\">Repo.insert</code></a> function takes a <code class=\"language-text\">changeset</code>. It also takes other options like:</p>\n<ul>\n<li><code class=\"language-text\">:returning</code> for selecting which fields to return. It will return the fields the struct by default.</li>\n<li><code class=\"language-text\">:on_conflict</code> to specify an alternative action to raising an error. We will use this one later on for upserts.</li>\n</ul>\n<p>See the official docs for more <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert/2-options\">options</a>. You can also use the <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert!/2\"><code class=\"language-text\">Repo.insert!</code></a> function which is similar to <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert/2\"><code class=\"language-text\">Repo.insert</code></a> which will raise if the changeset is invalid or an error happens.</p>\n<p>Okay, let’s try inserting a Challenge using the function we just created.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Best Challenge Ever\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">|></span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges<span class=\"token punctuation\">.</span>create_challenge</code></pre></div>\n<p>It should return the following tuple:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">%</span>GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges<span class=\"token punctuation\">.</span>Challenge<span class=\"token punctuation\">{</span>\n   <span class=\"token attr-name\">__meta__:</span> <span class=\"token comment\">#Ecto.Schema.Metadata&lt;:loaded, \"challenges\">,</span>\n   <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">id:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">inserted_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">07</span> <span class=\"token number\">19</span><span class=\"token atom symbol\">:46</span><span class=\"token atom symbol\">:50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">solutions:</span> <span class=\"token comment\">#Ecto.Association.NotLoaded&lt;association :solutions is not loaded>,</span>\n   <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Best Challenge Ever\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token attr-name\">updated_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">07</span> <span class=\"token number\">19</span><span class=\"token atom symbol\">:46</span><span class=\"token atom symbol\">:50</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Make note of that <code class=\"language-text\">Ecto.Association.NotLoaded</code> message. We will go over that later.</p>\n<p>Here are other functions Ecto provides out of the box to insert records:</p>\n<ul>\n<li><a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert_all/3\"><code class=\"language-text\">Repo.insert_all</code></a> for inserting many entries into the repository.</li>\n<li><a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert_or_update/2\"><code class=\"language-text\">Repo.insert_or_update</code></a> for updating or inserting a record into the repository. This is also a way of doing upserts.</li>\n</ul>\n<p>Let’s move on to reading records from our repository.</p>\n<h2>Reading Records</h2>\n<p>Let’s create a simple function inside the <code class=\"language-text\">Challenges</code> module to get a challenge by its primary id. Let’s call it <code class=\"language-text\">get_challenge_by_id</code> and it will look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> get_challenge_by_id<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  Challenge\n  <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>As you can see, this functions is fairly straightforward. The <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:get/3\"><code class=\"language-text\">Repo.get</code></a> takes in our <code class=\"language-text\">Challenge</code> schema and the id. It returns the struct if there is a match, otherwise, <code class=\"language-text\">nil</code> will be returned.</p>\n<p>Let’s give it a try.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges\n\n<span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> challenge<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Best Challenge Ever\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">|></span> Challenges<span class=\"token punctuation\">.</span>create_challenge\n\nChallenges<span class=\"token punctuation\">.</span>get_challenge_by_id<span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It should return the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token punctuation\">%</span>GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges<span class=\"token punctuation\">.</span>Challenge<span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">__meta__:</span> <span class=\"token comment\">#Ecto.Schema.Metadata&lt;:loaded, \"challenges\">,</span>\n  <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">id:</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">inserted_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">11</span> <span class=\"token number\">05</span><span class=\"token atom symbol\">:08</span><span class=\"token atom symbol\">:32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">solutions:</span> <span class=\"token comment\">#Ecto.Association.NotLoaded&lt;association :solutions is not loaded>,</span>\n  <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Best Challenge Ever\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">updated_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">11</span> <span class=\"token number\">05</span><span class=\"token atom symbol\">:08</span><span class=\"token atom symbol\">:32</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are other ways of querying the database and Ecto does support custom queries. Here are some of the functions Ecto provides out of the box:</p>\n<ul>\n<li><a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:one/2\"><code class=\"language-text\">Repo.one</code></a> for fetching a single result.</li>\n<li><a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:get_by/3\"><code class=\"language-text\">Repo.get_by</code></a> for fetching a single result by a given column instead of the primary key.</li>\n<li><a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:all/2\"><code class=\"language-text\">Repo.all</code></a> for fetching all entries from a query.</li>\n</ul>\n<p>Let’s move on the updating records.</p>\n<h2>Updating Records</h2>\n<p>Let’s start by creating the <code class=\"language-text\">update_challenge</code> function inside the <code class=\"language-text\">Challenges</code> module.\nIt will take in a <code class=\"language-text\">%Challenge</code> struct as the first argument and the updated fields as a map. Our function will look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> update_challenge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">%</span>Challenge<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> challenge<span class=\"token punctuation\">,</span> attrs <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  challenge\n  <span class=\"token operator\">|></span> Challenge<span class=\"token punctuation\">.</span>changeset<span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>As you may already see, the update function is similar to <code class=\"language-text\">create_challenge</code>. We pass in our record as the first argument and the fields to update as the second argument. The <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:update/2\"><code class=\"language-text\">Repo.update</code></a> function takes the updated changeset and executes the query to update the record. This relies on the primary key of the record <code class=\"language-text\">Ecto.NoPrimaryKeyFieldError</code> will be raised if there is none.</p>\n<p>Let’s try updating the challenge we just created.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">alias</span> GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges\n\n<span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> challenge<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Best Challenge Ever\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">|></span> Challenges<span class=\"token punctuation\">.</span>create_challenge\n\nchallenge\n<span class=\"token operator\">|></span> Challenges<span class=\"token punctuation\">.</span>update_challenge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Updated title\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It should return a tuple <code class=\"language-text\">{:ok, struct}</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">%</span>GettingStartedWithEcto<span class=\"token punctuation\">.</span>Challenges<span class=\"token punctuation\">.</span>Challenge<span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">__meta__:</span> <span class=\"token comment\">#Ecto.Schema.Metadata&lt;:loaded, \"challenges\">,</span>\n  <span class=\"token attr-name\">description:</span> <span class=\"token string\">\"An example description\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">id:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">inserted_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">08</span> <span class=\"token number\">14</span><span class=\"token atom symbol\">:13</span><span class=\"token atom symbol\">:19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">level:</span> <span class=\"token string\">\"easy\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">solutions:</span> <span class=\"token comment\">#Ecto.Association.NotLoaded&lt;association :solutions is not loaded>,</span>\n  <span class=\"token attr-name\">title:</span> <span class=\"token string\">\"Updated title\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">updated_at:</span> ~N<span class=\"token punctuation\">[</span><span class=\"token number\">2018</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">08</span> <span class=\"token number\">14</span><span class=\"token atom symbol\">:13</span><span class=\"token atom symbol\">:51</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Deleting Records</h2>\n<p>Deleting records in Ecto is simple. Let’s create the <code class=\"language-text\">delete_challenge</code> function inside our <code class=\"language-text\">Challenges</code> module. We will take a <code class=\"language-text\">%Challenge</code> struct or changeset as an argument and delete the record by calling the <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:delete/2\"><code class=\"language-text\">Repo.delete</code></a>. Here’s what it looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> delete_challenge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">%</span>Challenge<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> challenge<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  challenge\n  <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>It returns <code class=\"language-text\">{:ok, struct}</code> if it succeeded or <code class=\"language-text\">{:error, changeset}</code> if there was an error.</p>\n<p>What if we want to delete a record and we only have the id? We can do that by creating a struct with just the id field and passing it to the <a href=\"https://hexdocs.pm/ecto/Ecto.Repo.html#c:delete/2\"><code class=\"language-text\">Repo.delete</code></a> function. Our function will look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> delete_challenge<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> is_integer<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  <span class=\"token punctuation\">%</span>Challenge<span class=\"token punctuation\">{</span><span class=\"token attr-name\">id:</span> id<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|></span> Repo<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>With the magic of pattern matching and guards, our function will take the id and delete the record.</p>\n<hr>\n<h2>Congratulations 🎉 🎉 🎉</h2>\n<p>You just learned how to create, read, update, and delete records with Ecto. </p>\n<p>One thing to note is that I used the Ecto functions that return tuples or <code class=\"language-text\">nil</code> but there are equibalent functions that raise errors instead. For example, there is a <code class=\"language-text\">Repo.get!</code> that raises an errors instead of returning a <code class=\"language-text\">nil</code> and there is a <code class=\"language-text\">Repo.delete!</code> that raises an error instead of returning <code class=\"language-text\">{:error, changeset}</code>.</p>","frontmatter":{"title":"Getting Started with Ecto Part 3: CRUD Operations","date":"December 03, 2018"}}},"pageContext":{"slug":"/getting-started-with-ecto-part-3/","previous":{"fields":{"slug":"/getting-started-with-ecto-part-2/"},"frontmatter":{"title":"Getting Started with Ecto Part 2: Migrations, Schemas, and Changeset"}},"next":null}}